// This is your Prisma schema file for AromaSouq MVP v2
// Luxury fragrance marketplace for UAE/GCC market

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  WALLET
  CASH_ON_DELIVERY
}

enum CoinTransactionType {
  EARNED
  SPENT
  REFUNDED
  EXPIRED
  ADMIN_ADJUSTMENT
}

enum CoinSource {
  ORDER_PURCHASE
  PRODUCT_REVIEW
  REFERRAL
  PROMOTION
  REFUND
  ADMIN
}

enum VoteType {
  HELPFUL
  NOT_HELPFUL
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

// ============================================================================
// USER MODEL
// ============================================================================

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  firstName String     @map("first_name")
  lastName  String     @map("last_name")
  phone     String?
  avatar    String?
  role      UserRole   @default(CUSTOMER)
  status    UserStatus @default(ACTIVE)

  // New fields for MVP v2
  emailVerified     Boolean @default(false) @map("email_verified")
  preferredLanguage String  @default("en") @map("preferred_language")
  coinsBalance      Int     @default(0) @map("coins_balance")

  // Addresses
  addresses Address[]

  // Orders
  orders Order[]

  // Reviews
  reviews     Review[]
  reviewVotes ReviewVote[]

  // Wishlist
  wishlist WishlistItem[]

  // Cart
  cart Cart?

  // Vendor Profile (if role is VENDOR)
  vendorProfile Vendor?

  // Wallet for coins
  wallet Wallet?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// ============================================================================
// VENDOR MODEL
// ============================================================================

model Vendor {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  businessName   String  @map("business_name")
  businessNameAr String? @map("business_name_ar")
  slug           String? @unique
  description    String?
  descriptionAr  String? @map("description_ar")
  logo           String?
  banner         String?

  // New fields for MVP v2
  tagline      String?
  taglineAr    String? @map("tagline_ar")
  brandStory   String? @map("brand_story")
  brandStoryAr String? @map("brand_story_ar")

  // Social Media
  instagramUrl String? @map("instagram_url")
  facebookUrl  String? @map("facebook_url")
  twitterUrl   String? @map("twitter_url")
  tiktokUrl    String? @map("tiktok_url")

  // WhatsApp
  whatsappNumber  String? @map("whatsapp_number")
  whatsappEnabled Boolean @default(false) @map("whatsapp_enabled")

  // Business Details
  tradeLicense String? @map("trade_license")
  taxNumber    String? @map("tax_number")

  // Contact
  businessEmail String  @map("business_email")
  businessPhone String  @map("business_phone")
  website       String?

  // Status
  status     VendorStatus @default(PENDING)
  verifiedAt DateTime?    @map("verified_at")

  // Products
  products Product[]

  // Coupons
  coupons Coupon[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("vendors")
}

// ============================================================================
// CATEGORY MODEL
// ============================================================================

model Category {
  id            String  @id @default(uuid())
  name          String
  nameAr        String? @map("name_ar")
  slug          String  @unique
  description   String?
  descriptionAr String? @map("description_ar")
  icon          String?
  image         String?

  // Hierarchy
  parentId String?    @map("parent_id")
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // Products
  products Product[]

  // Display Order
  sortOrder Int     @default(0) @map("sort_order")
  isActive  Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

// ============================================================================
// BRAND MODEL
// ============================================================================

model Brand {
  id            String  @id @default(uuid())
  name          String
  nameAr        String? @map("name_ar")
  slug          String  @unique
  description   String?
  descriptionAr String? @map("description_ar")
  logo          String?
  banner        String?

  // Products
  products Product[]

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("brands")
}

// ============================================================================
// PRODUCT MODEL
// ============================================================================

model Product {
  id String @id @default(uuid())

  // Basic Info
  name          String
  nameAr        String? @map("name_ar")
  slug          String  @unique
  description   String?
  descriptionAr String? @map("description_ar")

  // Pricing
  price          Float
  compareAtPrice Float? @map("compare_at_price")
  cost           Float?

  // Inventory
  sku           String  @unique
  barcode       String?
  stock         Int     @default(0)
  lowStockAlert Int     @default(10) @map("low_stock_alert")

  // Media
  images String[]
  video  String?

  // Relations
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])

  brandId String? @map("brand_id")
  brand   Brand?  @relation(fields: [brandId], references: [id])

  vendorId String @map("vendor_id")
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  // Basic Specifications
  size          String?
  concentration String?
  gender        String?
  notes         String?

  // NEW: Enhanced Scent Profile for MVP v2
  topNotes    String? @map("top_notes")
  heartNotes  String? @map("heart_notes")
  baseNotes   String? @map("base_notes")
  scentFamily String? @map("scent_family")
  longevity   String? // e.g., "6-8 hours"
  sillage     String? // e.g., "Moderate"
  season      String? // e.g., "Summer, Spring"

  // NEW: WhatsApp Integration
  enableWhatsapp Boolean @default(false) @map("enable_whatsapp")
  whatsappNumber String? @map("whatsapp_number")

  // NEW: Coins System
  coinsToAward Int @default(0) @map("coins_to_award")

  // NEW: Product Stats
  viewCount  Int @default(0) @map("view_count")
  salesCount Int @default(0) @map("sales_count")

  // SEO
  metaTitle       String? @map("meta_title")
  metaDescription String? @map("meta_description")

  // Status
  isActive   Boolean @default(true) @map("is_active")
  isFeatured Boolean @default(false) @map("is_featured")

  // Reviews
  reviews       Review[]
  averageRating Float    @default(0) @map("average_rating")
  reviewCount   Int      @default(0) @map("review_count")

  // NEW: Product Variants (sizes, variations)
  variants ProductVariant[]

  // NEW: Product Videos
  videos ProductVideo[]

  // Wishlist & Cart
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
  orderItems    OrderItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("products")
}

// ============================================================================
// PRODUCT VARIANT MODEL (NEW)
// ============================================================================

model ProductVariant {
  id        String  @id @default(uuid())
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  name   String // e.g., "50ml", "100ml", "Travel Size"
  nameAr String? @map("name_ar")
  sku    String  @unique
  price  Float
  stock  Int     @default(0)

  // Optional variant-specific fields
  image          String?
  compareAtPrice Float?  @map("compare_at_price")

  // Cart items with this variant
  cartItems CartItem[]

  isActive  Boolean @default(true) @map("is_active")
  sortOrder Int     @default(0) @map("sort_order")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_variants")
}

// ============================================================================
// PRODUCT VIDEO MODEL (NEW)
// ============================================================================

model ProductVideo {
  id        String  @id @default(uuid())
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  url       String
  title     String?
  titleAr   String? @map("title_ar")
  thumbnail String?
  duration  Int? // in seconds

  sortOrder Int     @default(0) @map("sort_order")
  isActive  Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_videos")
}

// ============================================================================
// WALLET MODEL (NEW)
// ============================================================================

model Wallet {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  balance        Int @default(0) // Coin balance
  lifetimeEarned Int @default(0) @map("lifetime_earned")
  lifetimeSpent  Int @default(0) @map("lifetime_spent")

  transactions CoinTransaction[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("wallets")
}

// ============================================================================
// COIN TRANSACTION MODEL (NEW)
// ============================================================================

model CoinTransaction {
  id       String @id @default(uuid())
  walletId String @map("wallet_id")
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  amount      Int // Positive for earned, negative for spent
  type        CoinTransactionType
  source      CoinSource
  description String?

  // Reference IDs
  orderId   String? @map("order_id")
  reviewId  String? @map("review_id")
  productId String? @map("product_id")

  // Balance after this transaction
  balanceAfter Int @map("balance_after")

  // Expiry for earned coins (optional)
  expiresAt DateTime? @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")

  @@index([walletId])
  @@map("coin_transactions")
}

// ============================================================================
// ADDRESS MODEL
// ============================================================================

model Address {
  id     String @id @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fullName String @map("full_name")
  phone    String

  // Address Details
  addressLine1 String  @map("address_line1")
  addressLine2 String? @map("address_line2")
  city         String
  state        String
  country      String  @default("UAE")
  zipCode      String  @map("zip_code")

  // Flags
  isDefault Boolean @default(false) @map("is_default")

  // Orders
  orders Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("addresses")
}

// ============================================================================
// ORDER MODEL
// ============================================================================

model Order {
  id          String @id @default(uuid())
  orderNumber String @unique @map("order_number")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  addressId String  @map("address_id")
  address   Address @relation(fields: [addressId], references: [id])

  // Order Details
  items OrderItem[]

  // Pricing
  subtotal    Float
  tax         Float
  shippingFee Float @map("shipping_fee")
  discount    Float @default(0)
  total       Float

  // NEW: Coins Integration
  coinsEarned Int @default(0) @map("coins_earned")
  coinsUsed   Int @default(0) @map("coins_used")

  // Coupon
  couponId String? @map("coupon_id")
  coupon   Coupon? @relation(fields: [couponId], references: [id])

  // Status
  orderStatus   OrderStatus   @default(PENDING) @map("order_status")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  paymentMethod PaymentMethod @map("payment_method")

  // Payment
  paymentId String? @map("payment_id")

  // Tracking
  trackingNumber String? @map("tracking_number")

  // Timestamps
  confirmedAt DateTime? @map("confirmed_at")
  shippedAt   DateTime? @map("shipped_at")
  deliveredAt DateTime? @map("delivered_at")
  cancelledAt DateTime? @map("cancelled_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

// ============================================================================
// ORDER ITEM MODEL
// ============================================================================

model OrderItem {
  id String @id @default(uuid())

  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  quantity Int
  price    Float

  createdAt DateTime @default(now()) @map("created_at")

  @@map("order_items")
}

// ============================================================================
// CART MODEL
// ============================================================================

model Cart {
  id String @id @default(uuid())

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  items CartItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("carts")
}

// ============================================================================
// CART ITEM MODEL
// ============================================================================

model CartItem {
  id String @id @default(uuid())

  cartId String @map("cart_id")
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId String?         @map("variant_id")
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  quantity Int     @default(1)
  notes    String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([cartId, productId, variantId])
  @@map("cart_items")
}

// ============================================================================
// WISHLIST ITEM MODEL
// ============================================================================

model WishlistItem {
  id String @id @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// ============================================================================
// REVIEW MODEL
// ============================================================================

model Review {
  id String @id @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  rating  Int
  title   String?
  comment String?
  images  String[]

  // NEW: Vendor Reply
  vendorReply     String?   @map("vendor_reply")
  vendorRepliedAt DateTime? @map("vendor_replied_at")

  // NEW: Helpful/Not Helpful voting
  helpfulCount    Int @default(0) @map("helpful_count")
  notHelpfulCount Int @default(0) @map("not_helpful_count")

  // Status
  isVerifiedPurchase Boolean @default(false) @map("is_verified_purchase")
  isPublished        Boolean @default(true) @map("is_published")

  // NEW: Review Images relation
  reviewImages ReviewImage[]

  // NEW: Review Votes
  votes ReviewVote[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, productId])
  @@map("reviews")
}

// ============================================================================
// REVIEW IMAGE MODEL (NEW)
// ============================================================================

model ReviewImage {
  id       String @id @default(uuid())
  reviewId String @map("review_id")
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  url       String
  sortOrder Int    @default(0) @map("sort_order")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("review_images")
}

// ============================================================================
// REVIEW VOTE MODEL (NEW)
// ============================================================================

model ReviewVote {
  id       String @id @default(uuid())
  reviewId String @map("review_id")
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  voteType VoteType @map("vote_type")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([reviewId, userId])
  @@map("review_votes")
}

// ============================================================================
// COUPON MODEL
// ============================================================================

model Coupon {
  id             String       @id @default(uuid())
  code           String       @unique
  discountType   DiscountType @map("discount_type")
  discountValue  Float        @map("discount_value")
  minOrderAmount Float?       @map("min_order_amount")
  maxDiscount    Float?       @map("max_discount")
  usageLimit     Int?         @map("usage_limit")
  usageCount     Int          @default(0) @map("usage_count")
  startDate      DateTime     @map("start_date")
  endDate        DateTime     @map("end_date")
  isActive       Boolean      @default(true) @map("is_active")
  vendorId       String       @map("vendor_id")
  vendor         Vendor       @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  orders Order[]

  @@map("coupons")
}
